OPTIMAL SOLUTION (set ds approach)

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.size()==0) return 0;
        int n=nums.size();
        int longest =1;
        unordered_set<int>st;
        for(int i=0;i<n;i++){
            st.insert(nums[i]);
        }
        for(auto it: st){
            if(st.find(it-1)==st.end()){
                int cnt=1;
                int x=it;
                while(st.find(x+1)!= st.end()){
                    x=x+1;
                    cnt=cnt+1;
                }
                longest= max(longest,cnt);
            }
        }
        return longest;
    }
};

BETTER SOLUTION

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.size()==0) return 0;
        sort(nums.begin(),nums.end());
        int n=nums.size();
        int lastsmallest = INT_MIN;
        int cntcurr =0;
        int longest =1;
        for(int i=0;i<n;i++){
            if(nums[i]-1==lastsmallest){
                cntcurr++;
                lastsmallest=nums[i];
            }
            else if(nums[i]!=lastsmallest){
                cntcurr=1;
                lastsmallest=nums[i];
            }
            longest = max(longest,cntcurr);
        }
        return longest;
    }
};
