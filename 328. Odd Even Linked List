OPTIMAL SOLUTION (BY INTERCHANGING THE LINKS)

class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head == NULL || head->next == NULL) return head;
        ListNode* odd = head;
        ListNode* even = head->next;
        ListNode* evenHead = head->next;

        while(even != NULL && even->next != NULL){
            odd->next = odd->next->next;
            even->next = even->next->next;

            odd = odd->next;
            even = even->next;
        }
        odd->next = evenHead;
        return head;
    }
};

BRUTE FORCE (AVOID IT...PERSONAALY)

class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head == NULL || head->next == NULL) return head;
        vector<int>vec;
        ListNode* temp = head;
        while(temp != NULL ){
            vec.push_back(temp->val);
            if(temp->next) temp = temp->next->next;
            else break;
        }
        
        temp = head->next;
        while(temp != NULL ){
            vec.push_back(temp->val);
            if(temp->next) temp = temp->next->next;
            else break;
        }

        long i=0;
        temp = head;
        while(temp && i < vec.size()){
            temp->val = vec[i];
            i++;
            temp = temp->next;
        }

        return head;
    }
};
