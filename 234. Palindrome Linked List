OPTIMAL SOLUTION

class Solution {
public:
    ListNode* reverseLinkedlist(ListNode* head){
        if(head==NULL || head->next == NULL) return head;
        ListNode* newhead = reverseLinkedlist(head->next);
        ListNode* front = head->next;
        front->next = head;
        head->next = NULL;
        return newhead;
    }
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next == NULL) return true;
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast->next != NULL && fast->next->next != NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode* newhead = reverseLinkedlist(slow->next);
        ListNode* first = head;
        ListNode* second = newhead;
        while(second != NULL){
            if(first->val != second->val){
                reverseLinkedlist(newhead);
                return false;
            }
            first = first->next;
            second = second->next;
        }
        reverseLinkedlist(newhead);
        return true;
    }
};

BRUTE FORCE (USING STACK DATA STRUCTURE)

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        stack<int> st;
        ListNode* temp = head;
        while(temp != NULL){
            st.push(temp->val);
            temp=temp->next;
        }
        temp=head;
        while(temp!=NULL){
            if(temp->val != st.top()) return false;
            temp = temp->next;
            st.pop();
        }
        return true;
    }
};
