USING SET

class Solution {
public:
    bool isHappy(int n) {
        set<int> seen;
        while (n != 1 && seen.find(n) == seen.end()) {
            seen.insert(n);
            int sum = 0;
            while (n > 0) {
                int digit = n % 10;
                sum += digit * digit;
                n /= 10;
            }
            n = sum;
        }
        return n == 1;
    }  
};


USING FAST AND SLOW

class Solution {
public:
    int getnextnumber(int n){
            int sum=0;
            while(n>0){
                int digit = n%10;
                sum = sum + (digit*digit);
                n=n/10;
            }
            return sum;
        }

    bool isHappy(int n) {
        int slow = n;
        int fast = getnextnumber(n);

        while(fast != 1 && slow != fast){
            slow = getnextnumber(slow);
            fast = getnextnumber(getnextnumber(fast));
        }

        return fast==1;
    }  
};


