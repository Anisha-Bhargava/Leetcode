OPTIMAL SOLUTION (TORTOISE AND HARE ALGORITHM..optimal in terms of TC)

class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        if(head == NULL || head->next == NULL) return NULL;
        ListNode* slow = head;
        ListNode* fast = head;
        fast=fast->next->next;
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        slow->next = slow->next->next;
        return head;
    }
};

BRUTE FORCE (TC- big O (N+N/2))

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        if(head == NULL || head->next == NULL) return NULL;
        ListNode* temp = head;
        int n=0;
        while(temp != NULL){
            n++;
            temp = temp->next;
        }
        int res = n/2;
        temp=head;
        while(temp != NULL){
            res--;
            if(res==0){
                temp->next = temp->next->next;
            }
            temp=temp->next;
        }
        return head;
    }
};
